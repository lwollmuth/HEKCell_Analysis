//**************************************************************************************************//Master_General Controls//This procedure file contains a number of general control functions://--routines for defining experimental parameters//--routines for defining layouts//--routines for general data processing: Resampling and Gaussian filter (GFilter)//--various procedures that are called from other programs for user inputs - NEEDS REVIEW//--routines for loading or exporting various file types////--at end are some unknown functions//**************************************************************************************************//**************************************************************************************************////Routines for defining Experimental Parameters typically for layout. //These vary depending on the particular set of experiments being done. ////**************************************************************************************************//***Defining Experimental Parameters for FSEC recordingsProc Defineparameters(position,comments)	String position="V795"	prompt position, "Position Analyzed:"	String comments="add comments here"	String amplitudes="add comments here"		NewLayout/C=1														//creates layout with textbox giving		Textbox /A=MT/X=0/Y=0 "Position Analyzed: "+position		AppendText "comments: "+comments			ModifyLayout frame=0,trans=1	End//***Defining Experimental Parameters for slice recordingsProc DefineSliceParameters(filename,filter,sample,comments)	String filename="08-0407-1"	prompt filename, "filename:"	String filter="5 kHz"	prompt filter, "filter frequency:"	String sample="25 kHz"	prompt sample, "sample frequency:"	String comments="add comments here"	String amplitudes="add comments here"		NewLayout/C=1														//creates layout with textbox giving		Textbox /A=MT/X=0/Y=0 "filename: "+filename+";  filter frequency: "+filter+";    sample frequency: "+sample		AppendText "comments: "+comments			ModifyLayout frame=0,trans=1	End//***Defining Experimental Parameters for whole-cell recordingsProc DefineDataParameters(DNA,recmode,intsoln,extsoln,delay)	String DNA = "hN1-1a/hN2A"	prompt DNA, "Transfected DNA:"	String recmode = "whole-cell"	prompt recmode, "Recording Mode: "	String intsoln = "KCl. Energy based"	prompt intsoln, "Internal solution: "	String extsoln = "140 NaCl, 0.5 Ca2+,pH 7.4"	prompt extsoln, "External solution: "	String delay = ""	prompt delay, "Delay between pulses: "//	filename = person + month  + "-" + day + year+ "-" + num2str(filenumber) + ".IGB"			//	filename = person + month +day + year + "-" + num2str(filenumber) + ".IGB"					Layout /W = (500,100,1000,600)											//creates layout with textbox giving//		Textbox /A=MT/X=0/Y=0 "filename: "+HekaFileName		//general parameters		Textbox /A=MT/X=0/Y=0 		AppendText "DNA: " + DNA + ";     Recording Mode: "+recmode		AppendText "Internal Soln: " + intsoln + ";     External Soln: " + extsoln		AppendText "Delay between pulses: " + delay		AppendText "Filename: "	ModifyLayout frame=0,trans=1	End Macro()//**************************************************************************************************////Formats for layouts////**************************************************************************************************//***Routine places pairs of graphs on top of each other. Can place up to 8 graphs/layout.Proc OverLayout(totalnographs,start)	Variable totalnographs = 2, start =1  						//parameters for looping	prompt totalnographs, "Total number of graphs:"		String graphnameDoWindow/F Layout0Variable layleft=0,laywidth=270,layheight=170,laytop=0Variable groupno=start-1do	graphname="graph"+num2str(groupno)		Append $graphname	Modify frame($graphname)=0	Modify height($graphname)=layheight,width($graphname)=laywidth	if (groupno<4)		layleft=30		laytop=70+groupno*layheight	else		layleft=290		laytop=70+(groupno-4)*layheight	endif	Modify left($graphname)=layleft, top($graphname)=laytop		groupno +=1while (groupno<(totalnographs))End Macro()//***Routine places pairs of graphs adjcent to each other. Can place up to 8 graphs/layout.Proc AdjacentLayout(totalnographs,start)	Variable totalnographs = 2, start =1  						//parameters for looping	prompt totalnographs, "Total number of graphs:"		String graphnameDoWindow/F Layout0Variable layleft=0,laywidth=250,layheight=150,laytop=0Variable groupno=start-1Variable testgroupno=0Variable laytopcounter=0do	graphname="graph"+num2str(groupno+1)	Append $graphname	Modify frame($graphname)=0	Modify height($graphname)=layheight,width($graphname)=laywidth		testgroupno=groupno/2	if (testgroupno-round(testgroupno)==0)					//true if groupno even.		layleft=70		laytop=120+(laytopcounter)*layheight				laytopcounter +=1	else		layleft=300		laytop=120+(laytopcounter-1)*layheight	endif	Modify left($graphname)=layleft, top($graphname)=laytop	groupno +=1while (groupno<(totalnographs))End Macro() //***Routine for recovery layouts.  Proc RecoveryLayout()		DoWindow/F Layout0				Append Graph0,Graph1,Graph2,Graph3,table0					ModifyLayout left(graph0)=30, top(graph0)=80,width(graph0)=280,height(graph0)=220			ModifyLayout left(graph1)=305,top(graph1)=80,width(graph1)=280,height(graph1)=220			ModifyLayout left(table0)=30,top(table0)=298,width(table0)=260,height(table0)=350			ModifyLayout left(graph2)=305, top(graph2)=298,width(graph2)=280,height(graph2)=220			ModifyLayout left(graph3)=305, top(graph3)=520,width(graph3)=280,height(graph3)=220			ModifyLayout frame(graph0)=0,trans(graph0)=1			ModifyLayout frame(graph1)=0,trans(graph1)=1			ModifyLayout frame(table0)=0,trans(table0)=1			ModifyLayout frame(graph2)=0,trans(graph2)=1			ModifyLayout frame(graph3)=0,trans(graph3)=1			end//**************************************************************************************************////Various procedures that are called from other programs for user inputs - NEEDS REVIEW////**************************************************************************************************//***Procedures used for all Routines//***************************************************************//This PROC allows input of correct reversal potential...needed for Ca2+-permeable AMPARs...PROC CorrectRevPot(InputedRevPot)	Variable InputedRevPot=zeropot	prompt InputedRevPot,"Reversal Potential (mV) OK?: "	zeropot = InputedRevPotend//***Used to input for Agreement that some form of analysis is correct 	Proc Agreement(YON)	Variable YON = 1	prompt YON, "Good enough?  (y=1/n=0): "	Variable/G YesOrNo	YesOrNo = YONend//***Input for start and end points for any function (GGM Smooth & Anlyze)Proc InputPoints(startpoint, endpoint)	Variable startpoint = 0	prompt startpoint,"Startpoint "		Variable endpoint = 10	prompt endpoint,"Endpoint "	Variable/G Gstartpt			//needs to be corrected!!!!!!	Gstartpt = startpoint	Variable/G Gendpt	Gendpt = endpointend//***Input for start and end points for curve fitting (GGM Smooth & Analyze; CurveFitting) PROC InputCurveFitting(startfit, endfit)	Variable startfit = 0	prompt startfit,"Start point for curve fitting?"		Variable endfit = 15	prompt endfit,"End point for curve fitting? "	Variable/G Gstartfit	Gstartfit = startfit	Variable/G Gendfit	Gendfit = endfitend  //***Input new wave name to analyze	Proc CallWaveNameSample(tempwave) 		String tempwave			prompt tempwave,"Next Wave to Analyze",popup,WaveList("*",";","")		String/G Gtempwave 		Gtempwave = tempwave	End//***Input degrees for polynomial.  PROC InputDegree(PolyD)	Variable PolyD = 3	prompt PolyD, "Polynomial degree "	Variable/G PolyDegree	PolyDegree = PolyDend//This PROC allows input of experiment numbers for a variable number of totalseriesnos.PROC voltagerange(startvts,endvts,testsoln)	Variable startvts = -40	prompt startvts,"Start of fit range: "	Variable endvts = 40 	prompt endvts, "End of fit range: "	String testsoln="0 Mg2+"	prompt testsoln, "External solution: "		Variable/G startvolts	startvolts=startvts	Variable/G endvolts	endvolts=endvts	String/G testsolution	testsolution=testsoln	end//This PROC allows fo rinput of just voltage range for fits.PROC voltagerange2(startvts,endvts)	Variable startvts = -40	prompt startvts,"Start of fit range: "	Variable endvts = 40 	prompt endvts, "End of fit range: "		Variable/G startvolts	startvolts=startvts	Variable/G endvolts	endvolts=endvts	end//***************************************************************//***Procedures used for specific questions...//***Input DecayFactor - Specific to GGM 'Smooth & Analyze'Proc DecayFactor_Proc(DFactor)	Variable DFactor = 0.95	prompt DFactor, "Fraction of peak amplitude for event duration?"		Variable/G GDecayFactor		GDecayFactor = DFactor	end//***Used in multiple routinesProc ReAnalyzeorNot(ReAnalorNot)	Variable ReAnalorNot = 1		prompt ReAnalorNot, "Good enough (y=1); Reanalyze sweep (2); Failure (3); DO NOT ANALYZE (4): "	Variable/G GReAnalorNot		GReAnalorNot = ReAnalorNotend//***Used in Slow TrainsProc NewParameters(fitoffset,StartSS,EndSS)	Variable fitoffset = 0.01		prompt fitoffset,"Offset of peak for fit?"		Variable StartSS = 2.8		prompt StartSS,"Start for steady state current? "	Variable EndSS = 3.0		prompt EndSS,"End for steady state current? "	Variable/G Gfitoffset		Gfitoffset = fitoffset	Variable/G GStartSS		GStartSS = StartSS	Variable/G GEndSS		GEndSS = EndSSend//***Something to do with minIANAL?Proc SaveMAnalFile(SFileName)	String SFileName	prompt SFileName,"Wave to MiniAnal",popup,WaveList("*",";","")		Save/C $SFileName as SFileName + ".ibw"	End Macro//***Used for including sweeps in analysis		Proc SpotcleanSweep(YON)	Variable YON = 1	prompt YON, "Include sweep?  (y=1/n=0): "	Variable/G YesOrNo	YesOrNo = YONendProc APWaveNotoPlot(APWaveNo)	Variable APWaveNo = 20	prompt APWaveNo, "Wave to Plot or Export? "	Variable/G GAPWaveNo	GAPWaveNo = APWaveNoend//------------------------------------------------		Proc InputScale(DownSc, UpSc)	Variable DownSc = -100	prompt DownSc,"Trains Scale from"		Variable UpSc = 10	prompt UpSc,"to"	Variable/G LDownSc	LDownSc = DownSc	Variable/G LUpSc	LUpSc = UpScend//------------------------------------------------Proc YAxisScale(yminvalue, ymaxvalue)			//Used in PfMeasurements	Variable yminvalue 	prompt yminvalue,"Y minimum value "		Variable ymaxvalue	prompt ymaxvalue,"Y maximum value "	Variable/G Gyminvalue	Gyminvalue = yminvalue	Variable/G Gymaxvalue	Gymaxvalue = ymaxvalueend//This PROC allows input of range for fura baseline and peak fura signal. //Used in Macro PfMeasurementsPROC signalfura(dummy2,dummy3,dummy4)	Variable dummy2=0	prompt dummy2,"Start of fura baseline? "		Variable dummy3=9	prompt dummy3,"End of fura baseline? "	Variable dummy4=15	prompt dummy4, "Preferred fura signal?"	Variable/G furabasest	furabasest=dummy2	Variable/G furabaseend	furabaseend=dummy3	Variable/G furasignalno	furasignalno=dummy4end//This PROC allows input of experiment numbers for a variable number of totalexpnos.PROC experimentno(dummy1,dummy1a)	Variable dummy1	prompt dummy1,"Next experiment no? "	Variable dummy1a=expnopass	prompt dummy1a, "Last experiment no: "	Variable/G testdummy	testdummy=dummy1end//This routine (derived from example given by WaveMatrics) allows user input for cursors...Function UserCursorAdjust(grfName)	String grfName	DoWindow/F AnalysisWindow								// Bring graph to front	if (V_Flag == 0)											// Verify that graph exists		Abort "UserCursorAdjust: No such graph."		return -1	endif	NewPanel/K=2 /W=(700,650,980,730) as "Pause for Cursor"	DoWindow/C tmp_PauseforCursor							// Set to an unlikely name	AutoPositionWindow/E/M=1/R=AnalysisWindow				// Put panel near the graph	DrawText 21,20,"Adjust the cursors and then"	DrawText 21,40,"press Continue."	Button button0,pos={80,58},size={92,20},title="Continue"	Button button0,proc=UserCursorAdjust_ContButtonProc	PauseForUser tmp_PauseforCursor,AnalysisWindow	return 0EndFunction UserCursorAdjust_ContButtonProc(ctrlName) : ButtonControl	String ctrlName	DoWindow/K tmp_PauseforCursor							// Kill selfEnd//**************************************************************************************************//**************************************************************************************************////Routines for loading various file types////**************************************************************************************************//**This routine loads data from Igor Text Files...Window LoadITextWaves() : Panel	String/G TextFileName, TextFileNameBase	String/G SCWavename	String/G	Variable TextFileNameLength	String SCWavenameTemp,SCWavenameBase	Silent 1	open /r/d/m="Please select the Text file"/t="BINA" dummy		TextFileName = S_filename	if ( strlen(TextFileName) == 0)		return	endif	TextFileNameLength = strlen(TextFileName)	TextFileNameBase = TextFileName[0,TextFileNameLength - 4]	LoadWave /T/Q/A TextFileName	End//**This routine loads data from General Text Files...Window LoadGTextWaves() : Panel	String/G TextFileName, TextFileNameBase	String/G SCWavename	String/G	Variable TextFileNameLength	String SCWavenameTemp,SCWavenameBase	Silent 1	open /r/d/m="Please select the Text file"/t="BINA" dummy		TextFileName = S_filename	if ( strlen(TextFileName) == 0)		return	endif	TextFileNameLength = strlen(TextFileName)	TextFileNameBase = TextFileName[0,TextFileNameLength - 4]	LoadWave/G/Q/A TextFileName	Gnumofwavesloaded = V_flag	End//**This routine loads data from Microsoft EXCEL files...Window LoadExcelWaves() : Panel	String/G TextFileName, TextFileNameBase	String/G SCWavename	String/G	Variable TextFileNameLength	String SCWavenameTemp,SCWavenameBase	Silent 1	open /r/d/m="Please select the Excel file"/t="????" dummy		TextFileName = S_filename	if ( strlen(TextFileName) == 0)		return	endif	TextFileNameLength = strlen(TextFileName)	TextFileNameBase = TextFileName[0,TextFileNameLength - 4]	XLLoadWave/W=1/D/T TextFileName	Gnumofwavesloaded = V_flag	End//**************************************************************************************************// Set up table for export - UNCERTAIN of STATUSMacro ExportTable (TimeWave,ReferenceWave,NumberofSamples)	String TimeWave,		prompt TimeWave,"Time Wave",popup,WaveList("*",";","");";_none_"	String ReferenceWave		prompt ReferenceWave,"Reference Wave",popup,WaveList("*",";","");";_none_"	Variable NumberofSamples = 10		prompt NumberofSamples, "No. of waves to export (no reference)?"	Variable reference	Variable counter = 0	Variable FileLength	Variable NormValueEdit X_timeresamp,$ReferenceWave		//**Routine to find additional waves	do				CallWaveName()				AppendtoTable $TempWave_G		counter += 1		while (Counter < NumberofSamples)End //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////***********************************************************************//NOT CERTAIN WHERE THESE ROUTINES ARE USED BUT RETAINED FOR FUTURE PLUNDERINGWindow LoadAverageWaves() : Panel	String/G TextFileName, TextFileNameBase	String/G	Variable TextFileNameLength	Silent 1	open /r/d/m="Please select the Text file"/t="BINA" dummy		TextFileName = S_filename	if ( strlen(TextFileName) == 0 )		return	endif		TextFileNameLength = strlen(TextFileName)		TextFileNameBase = TextFileName[0,TextFileNameLength - 2]	InputNumbertoAvg()									//Input number of waves to average//		GNumbertoAvg//	LoadWave/J/W/Q/N=avgwave TextFileName				//Even numbers, starting with 0, correspond to current waves		//	Variable counter1 = 0		String LoadTextFileName		String currentwavename		Variable counter2 = 1 								//Assumes first file is 1		Variable counter3 = 0			do			LoadTextFileName = TextFileNameBase + num2str(counter2)							LoadWave/J/W/Q/A=avgwave LoadTextFileName											counter2+=1									while (counter2 < GNumbertoAvg + 1)						counter2 = 0										//Routine to average waves				Duplicate/O avgwave0 averagedwave			averagedwave = 0			do			currentwavename = "avgwave" + num2str(counter2)				averagedwave = averagedwave + $currentwavename						counter2+=2					while (counter2 < GNumbertoAvg + 2)				averagedwave=averagedwave/GNumbertoAvg				Display averagedwave	End Macro()